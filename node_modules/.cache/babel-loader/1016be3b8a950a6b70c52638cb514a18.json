{"ast":null,"code":"var _jsxFileName = \"/Users/tiziano/Documents/nodeJS/tb_reactportfolio/src/components/projects/StockForecasting.js\";\nimport React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport imageApp from '../../assets/projects/forecasting_button.png';\nimport useStylesGlobal from '../style/TextStyles.js';\nimport ColoredLine from '../style/ColouredLine.js';\nconst useStyles = makeStyles(theme => ({\n  Page: {\n    width: '80%',\n    margin: 'auto',\n    paddingBottom: '3em',\n    height: '100%',\n    [theme.breakpoints.down('xs')]: {\n      width: '95%'\n    }\n  }\n}));\n\nfunction StockForecastingComponent(props) {\n  const classes = useStyles();\n  const classesGlobal = useStylesGlobal();\n  return React.createElement(\"div\", {\n    className: classes.Page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: classesGlobal.TextTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Stock Price trend forecasting\"), React.createElement(\"p\", {\n    className: classesGlobal.Text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \" Forecasts based on historical prices are studied applying Linear Regression, Polynomial Regression, and Neural Network Backpropagation aimed to identify Elliott wave and Fibonacci ratios. \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), \"People sentiment, as a factor of stock price fluctuation is studied analysing messages published on Twitter using a Na\\xEFve Bayes approach.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: classesGlobal.ImageLogo,\n    src: imageApp,\n    alt: \"screenshots\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(ColoredLine, {\n    color: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"...\"), React.createElement(\"p\", {\n    className: classesGlobal.Text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    className: classesGlobal.TextSubTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Main Functionalities\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), \"- daily automatic update of the data\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), \"- daily and intraday stock price data covered\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), \"- 6 forecasting algorithms implemented\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), \"- ALL forecasting algorithms implemented from scratch\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), \"- controller algorithm to identify the best algorithm to use for each stock\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), \"- detailed accuracy information of the forecasting algorithm executed\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"b\", {\n    className: classesGlobal.TextSubTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Key Components used\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), \"- Flask microframework\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), \"- Python backend\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), \"- HTML/JS/CSS interface\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), \"- MySQL database\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), \"- Docker\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })));\n}\n\nexport default StockForecastingComponent;","map":{"version":3,"sources":["/Users/tiziano/Documents/nodeJS/tb_reactportfolio/src/components/projects/StockForecasting.js"],"names":["React","makeStyles","imageApp","useStylesGlobal","ColoredLine","useStyles","theme","Page","width","margin","paddingBottom","height","breakpoints","down","StockForecastingComponent","props","classes","classesGlobal","TextTitle","Text","ImageLogo","TextSubTitle"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport imageApp from '../../assets/projects/forecasting_button.png'\nimport useStylesGlobal from '../style/TextStyles.js'\nimport ColoredLine from '../style/ColouredLine.js' \n\n\n\nconst useStyles = makeStyles(theme => ({\n  Page: {\n    width: '80%',\n    margin: 'auto',\n    paddingBottom: '3em',\n    height: '100%',\n    [theme.breakpoints.down('xs')]: {\n      width: '95%',\n    },\n  },\n}));\n\nfunction StockForecastingComponent(props) {\n  const classes = useStyles();\n  const classesGlobal = useStylesGlobal();\n\n  return (\n    <div className={classes.Page}>\n      <h1 className={classesGlobal.TextTitle}>Stock Price trend forecasting</h1>\n      <p className={classesGlobal.Text}>\tForecasts based on historical prices are studied applying Linear Regression, Polynomial Regression, and Neural Network Backpropagation aimed to identify Elliott wave and Fibonacci ratios. <br/>\n      People sentiment, as a factor of stock price fluctuation is studied analysing messages published on Twitter using a Na√Øve Bayes approach.\n        <br /><br />\n      </p>\n      <div >\n        <img className={classesGlobal.ImageLogo} src={imageApp} alt=\"screenshots\"/>\n      </div>\n      <ColoredLine color='black' />\n      <div>...</div>\n      <p className={classesGlobal.Text}>\n        <b className={classesGlobal.TextSubTitle}>Main Functionalities</b><br /><br/>\n        - daily automatic update of the data<br/>\n\t\t\t  - daily and intraday stock price data covered<br/>\n\t\t\t  - 6 forecasting algorithms implemented<br/>\n        - ALL forecasting algorithms implemented from scratch<br/>\n\t\t\t  - controller algorithm to identify the best algorithm to use for each stock<br/>\n\t\t\t  - detailed accuracy information of the forecasting algorithm executed<br/>\n        <br /><br />\n        <b className={classesGlobal.TextSubTitle}>Key Components used</b><br/><br/>\n\t\t\t  - Flask microframework<br/>\n        - Python backend<br/>\n\t\t\t  - HTML/JS/CSS interface<br/>\n        - MySQL database<br/>\n\t\t\t  - Docker<br/>\n      </p>\n    </div>\n  )\n}\n \nexport default StockForecastingComponent;"]},"metadata":{},"sourceType":"module"}